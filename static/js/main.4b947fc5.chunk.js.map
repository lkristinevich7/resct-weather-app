{"version":3,"sources":["components/WeatherDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["WeatherDisplay","state","weatherData","id","this","props","fetch","then","res","json","data","setState","weather","iconUrl","icon","main","name","src","alt","description","temp","toFixed","temp_max","temp_min","wind","speed","React","Component","places","App","activePlace","className","map","place","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4NAEaA,G,YAAb,kDACI,aAAc,IAAD,8BACT,gBACKC,MAAO,CACRC,YAAa,MAHR,EADjB,gEAOwB,IAAD,OACTC,EAAIC,KAAKC,MAAMF,GAErBG,MAAM,qDAAqDH,EAAG,0DAC7DI,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACF,EAAKC,SAAS,CAAET,YAAaQ,SAbzC,+BAkBQ,IAAMR,EAAcE,KAAKH,MAAMC,YAC/B,IAAIA,EACA,OAAO,2CAEX,IAAMU,EAAUV,EAAYU,QAAQ,GAC9BC,EAAU,mCAAqCD,EAAQE,KAAO,OACpE,OACI,6BACI,4BACCF,EAAQG,KADT,OACmBb,EAAYc,KAC/B,yBAAKC,IAAKJ,EAASK,IAAKhB,EAAYiB,eAEpC,yCAAejB,EAAYa,KAAKK,KAAK,IAAI,KAAKC,QAAQ,GAAtD,SACA,sCAAYnB,EAAYa,KAAKO,SAAS,IAAI,KAAKD,QAAQ,GAAvD,SACA,qCAAWnB,EAAYa,KAAKQ,SAAS,IAAI,KAAKF,QAAQ,GAAtD,SACA,2CAAwC,MAAvBnB,EAAYsB,KAAKC,OAAaJ,QAAQ,GAAvD,eAjChB,GAAoCK,IAAMC,YCIpCC,EAAS,CACb,CAAEZ,KAAM,YAAUb,GAAI,WACtB,CAAEa,KAAM,SAAUb,GAAI,WACtB,CAAEa,KAAM,eAAWb,GAAI,WACvB,CAAEa,KAAM,cAAUb,GAAI,YAyCT0B,E,kDApCb,aAAc,IAAD,8BACX,gBACK5B,MAAM,CACT6B,YAAa,SAHJ,E,qDAMJ,IAAD,OACAA,EAAc1B,KAAKH,MAAM6B,YAEjC,OACE,yBAAKC,UAAU,OACb,gCACE,4CAEF,8BACE,6BAASA,UAAU,cAChBH,EAAOI,KAAI,SAACC,GAAD,OACV,4BACEC,IAAKD,EAAM9B,GACXgC,QAAS,WACP,EAAKxB,SAAS,CAACmB,YAAaG,EAAM9B,OAEnC8B,EAAMjB,UAKb,6BAASe,UAAU,mBACjB,kBAAC,EAAD,CAAgBG,IAAMJ,EAAa3B,GAAI2B,W,GA9B9BJ,IAAMC,WCDLS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4b947fc5.chunk.js","sourcesContent":["import React from \"react\"\n\nexport class WeatherDisplay extends React.Component{\n    constructor(){\n        super();\n        this.state= {\n            weatherData: null\n        };\n    }\n    componentDidMount(){\n        const id= this.props.id;\n\n        fetch(\"http://api.openweathermap.org/data/2.5/weather?id=\"+id+\"&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=imperial\")\n        .then(res=>res.json())\n        .then(data=>{\n            this.setState({ weatherData: data })\n        })\n        \n    }\n    render(){\n        const weatherData = this.state.weatherData;\n        if(!weatherData) {\n            return <div>Loading...</div>\n            }\n        const weather = weatherData.weather[0];\n        const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n        return (\n            <div>\n                <h1>\n                {weather.main} in {weatherData.name}\n                <img src={iconUrl} alt={weatherData.description} />\n                </h1>\n                <p>Current: {((weatherData.main.temp-32)/1.8).toFixed(0)}°C</p>\n                <p>High: {((weatherData.main.temp_max-32)/1.8).toFixed(0)}°C</p>\n                <p>Low: {((weatherData.main.temp_min-32)/1.8).toFixed(0)}°C</p>\n                <p>Wind Speed: {(weatherData.wind.speed*1.609).toFixed(0)} km/hr</p>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './App.css';\nimport { WeatherDisplay } from './components/WeatherDisplay';\n\n\nconst places = [\n  { name: \"Kraków\", id: \"3094802\" },\n  { name: \"Warsaw\", id: \"4312734\" },\n  { name: \"Wrocław\", id: \"3081368\" },\n  { name: \"Gdańsk\", id: \"3099434\" },\n];\n\nclass  App extends React.Component{\n  \n  constructor(){\n    super();\n    this.state={\n      activePlace: 3094802,\n    };\n  }\n  render(){\n    const activePlace = this.state.activePlace;\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Weather App</h1>\n      </header>\n      <main>\n        <section className=\"city-panel\"> \n          {places.map((place)=>(\n            <button \n              key={place.id} \n              onClick={()=>{\n                this.setState({activePlace: place.id})\n              }}>\n              {place.name}\n            </button>\n          \n          ))} \n        </section> \n        <section className=\"weather-display\">\n          <WeatherDisplay key ={activePlace} id={activePlace}/> \n        </section>\n      </main>\n    </div>\n  );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}